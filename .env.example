# Supabase Configuration
# Copy this file to .env and fill in your actual values

# Your Supabase project URL
VITE_SUPABASE_URL=https://your-project-id.supabase.co

# Your Supabase project anon/public key
VITE_SUPABASE_ANON_KEY=your-anon-key-here

# Environment Credentials Configuration
# This feature allows predefined user credentials to be stored in environment variables
# for automated sign-in scenarios, testing environments, and administrative access.

# Enable environment-based authentication (true/false)
# When enabled, users can sign in using predefined accounts from environment variables
# Default: false (disabled for security)
VITE_AUTH_ENV_ENABLED=false

# Enable automatic sign-in using environment credentials (true/false)
# When enabled, the application will automatically attempt to sign in using the first
# available environment account on startup. Useful for testing and development.
# Requires VITE_AUTH_ENV_ENABLED=true
# Default: false
VITE_AUTH_ENV_AUTO_SIGNIN=false

# Allow fallback to manual authentication when environment auth fails (true/false)
# When true, users can still use manual authentication if environment auth fails
# When false, users can only use environment authentication (not recommended for production)
# Default: true
VITE_AUTH_ENV_ALLOW_FALLBACK=true

# Enable strict mode - requires environment authentication to be working (true/false)
# When true, manual authentication is completely disabled if environment auth is enabled
# Use with caution - can lock users out if environment credentials are invalid
# Default: false
VITE_AUTH_ENV_STRICT_MODE=false

# Comma-separated list of account names to configure
# Each name listed here must have corresponding EMAIL and PASSWORD variables defined below
# Account names should be alphanumeric and use underscores or hyphens only
# Examples: admin,testuser,service-account,dev-user
VITE_AUTH_ENV_ACCOUNTS=admin,testuser,service-account

# Account configurations
# Replace ACCOUNTNAME with actual account names from VITE_AUTH_ENV_ACCOUNTS above
# All account names will be converted to UPPERCASE in the variable names

# Administrative account example - for system administration
VITE_AUTH_ENV_ACCOUNT_ADMIN_EMAIL=admin@example.com
VITE_AUTH_ENV_ACCOUNT_ADMIN_PASSWORD=secure-admin-password
VITE_AUTH_ENV_ACCOUNT_ADMIN_ROLE=admin

# Test user account example - for automated testing
VITE_AUTH_ENV_ACCOUNT_TESTUSER_EMAIL=test@example.com
VITE_AUTH_ENV_ACCOUNT_TESTUSER_PASSWORD=test-password
VITE_AUTH_ENV_ACCOUNT_TESTUSER_ROLE=user

# Service account example - for monitoring and automation
VITE_AUTH_ENV_ACCOUNT_SERVICE-ACCOUNT_EMAIL=service@example.com
VITE_AUTH_ENV_ACCOUNT_SERVICE-ACCOUNT_PASSWORD=service-account-password
VITE_AUTH_ENV_ACCOUNT_SERVICE-ACCOUNT_ROLE=service

# Additional account template (uncomment and configure as needed)
# VITE_AUTH_ENV_ACCOUNT_YOURNAME_EMAIL=your-email@example.com
# VITE_AUTH_ENV_ACCOUNT_YOURNAME_PASSWORD=your-secure-password
# VITE_AUTH_ENV_ACCOUNT_YOURNAME_ROLE=user

# Security Notes:
# - Passwords should be strong and unique for each account
# - In production, use secure environment variable management systems
# - Never commit actual credentials to version control
# - Consider using secrets management for sensitive deployments
# - Role field is optional but recommended for access control

# Use Cases:
# 1. Development: Set VITE_AUTH_ENV_ENABLED=true and VITE_AUTH_ENV_AUTO_SIGNIN=true
#    for automatic sign-in during development
# 2. Testing: Configure test accounts for automated integration tests
# 3. Production: Use service accounts for monitoring dashboards
# 4. Demo: Set up demo accounts for showcasing the application
